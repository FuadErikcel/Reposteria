/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.reposteria;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fuad Erikcel
 */
public class Consultas extends javax.swing.JFrame {
    
    Conexion conexionObjeto = new Conexion();
    Connection conexion = conexionObjeto.getConexion();

    public Consultas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbFiltro = new javax.swing.JLabel();
        cbxFiltro = new javax.swing.JComboBox<>();
        lbFecha = new javax.swing.JLabel();
        dateFecha = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFechas = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        dateFecha2 = new com.toedter.calendar.JDateChooser();
        lbFecha2 = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbFiltro.setText("Filtro:");
        jPanel1.add(lbFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        cbxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Búsqueda por Fecha Elaboración", "Búsqueda Rango de Fechas", "Últimos 30 días", "Ordenar por Fecha", "Próximos a Entregar", "Próximos a Vencer", "Búsqueda de Proveedor" }));
        cbxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFiltroActionPerformed(evt);
            }
        });
        jPanel1.add(cbxFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 250, -1));

        lbFecha.setText("Fecha:");
        jPanel1.add(lbFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, -1));

        dateFecha.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                dateFechaAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        dateFecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateFechaFocusLost(evt);
            }
        });
        jPanel1.add(dateFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 200, -1));

        tablaFechas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaFechas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 720, 220));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, -1, -1));
        jPanel1.add(dateFecha2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, 220, -1));

        lbFecha2.setText("Fecha 2:");
        jPanel1.add(lbFecha2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, -1, -1));

        txtProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProveedorActionPerformed(evt);
            }
        });
        txtProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProveedorKeyTyped(evt);
            }
        });
        jPanel1.add(txtProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 180, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProveedorKeyTyped
        buscarProveedor();
    }//GEN-LAST:event_txtProveedorKeyTyped

    private void txtProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProveedorActionPerformed
        // buscarProveedor();
    }//GEN-LAST:event_txtProveedorActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        if(cbxFiltro.getSelectedIndex()==0){
            mostrarFecha();
        }else if(cbxFiltro.getSelectedIndex()==1){
            last30days();
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void dateFechaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFechaFocusLost

    }//GEN-LAST:event_dateFechaFocusLost

    private void dateFechaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_dateFechaAncestorAdded

    }//GEN-LAST:event_dateFechaAncestorAdded

    private void cbxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFiltroActionPerformed
        if(cbxFiltro.getSelectedIndex()==0){
            btnBuscar.setVisible(true);
            lbFecha2.setVisible(false);
            dateFecha2.setVisible(false);
            txtProveedor.setVisible(false);
            lbFecha.setVisible(true);
            dateFecha.setVisible(true);
        }else if(cbxFiltro.getSelectedIndex()==2){
            btnBuscar.setVisible(false);
            last30days();
        }else if(cbxFiltro.getSelectedIndex()==3){
            btnBuscar.setVisible(false);
            orderdesc();
        }else if(cbxFiltro.getSelectedIndex()==4){
            btnBuscar.setVisible(false);
            proximosEntregar();
        }else if(cbxFiltro.getSelectedIndex()==6){
            lbFecha.setVisible(false);
            dateFecha.setVisible(false);
            lbFecha2.setVisible(false);
            dateFecha2.setVisible(false);
            btnBuscar.setVisible(false);
            txtProveedor.setVisible(true);
        }else if (cbxFiltro.getSelectedIndex()==1){
            lbFecha.setVisible(true);
            dateFecha.setVisible(true);
            lbFecha2.setVisible(true);
            dateFecha2.setVisible(true);
            btnBuscar.setVisible(true);
            txtProveedor.setVisible(false);
        }else if(cbxFiltro.getSelectedIndex()==5){
            lbFecha.setVisible(false);
            dateFecha.setVisible(false);
            lbFecha2.setVisible(false);
            dateFecha2.setVisible(false);
            btnBuscar.setVisible(false);
            txtProveedor.setVisible(false);
            fechaVencimiento();
        }
    }//GEN-LAST:event_cbxFiltroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consultas().setVisible(true);
            }
        });
    }
    
    public void mostrarFecha(){
        java.util.Date fecha = dateFecha.getDate();
        java.sql.Date fechaElaboracion = new java.sql.Date(fecha.getTime());
        try{
            String consultaSQL =  "SELECT \n" +
                                                "    producto.*,\n" +
                                                "    CASE \n" +
                                                "        WHEN galletas.tipo IS NOT NULL THEN 'Galleta'\n" +
                                                "        WHEN pan.tipo IS NOT NULL THEN 'Pan'\n" +
                                                "        WHEN pnormal.idpastelnormal IS NOT NULL THEN 'Pastel Normal'\n" +
                                                "        WHEN ppersonalizado.idppersonalizado IS NOT NULL THEN 'Pastel Personalizado'\n" +
                                                "        ELSE 'Tipo desconocido'\n" +
                                                "    END AS tipo_producto\n" +
                                                "FROM \n" +
                                                "    producto\n" +
                                                "LEFT JOIN \n" +
                                                "    galletas ON producto.idproducto = galletas.idgalletas\n" +
                                                "LEFT JOIN \n" +
                                                "    pnormal ON producto.idproducto = pnormal.idpastelnormal\n" +
                                                "LEFT JOIN \n" +
                                                "    pan ON producto.idproducto = pan.idpan\n" +
                                                "LEFT JOIN \n" +
                                                "    ppersonalizado ON producto.idproducto = ppersonalizado.idppersonalizado\n" +
                                                "WHERE \n" +
                                                "    producto.fechaelaboracion = ?;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);
            statement.setDate(1, (java.sql.Date) fechaElaboracion);

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Precio");
            modeloTabla.addColumn("Fecha de Elaboración");
            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproducto"),
                        resultSet.getString("tipo_producto"),
                        resultSet.getString("precioproducto"),
                        resultSet.getString("fechaelaboracion")
                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void rangoFechas(){
        java.util.Date fecha = dateFecha.getDate();
        java.sql.Date fecha1 = new java.sql.Date(fecha.getTime());
               java.util.Date fecha2 = dateFecha2.getDate();
        java.sql.Date fecha22 = new java.sql.Date(fecha2.getTime());

        try{
            String consultaSQL = "SELECT \n" +
                                                "    producto.idproducto, \n" +
                                                "    producto.precioproducto, \n" +
                                                "    producto.fechaelaboracion, \n" +
                                                "    CASE \n" +
                                                "        WHEN galletas.tipo IS NOT NULL THEN 'Galleta'\n" +
                                                "        WHEN pan.tipo IS NOT NULL THEN 'Pan'\n" +
                                                "        WHEN pnormal.idpastelnormal IS NOT NULL THEN 'Pastel Normal'\n" +
                                                "        WHEN ppersonalizado.idppersonalizado IS NOT NULL THEN 'Pastel Personalizado'\n" +
                                                "        ELSE 'Tipo desconocido'\n" +
                                                "    END AS tipo_producto\n" +
                                                "FROM \n" +
                                                "    producto\n" +
                                                "LEFT JOIN \n" +
                                                "    galletas ON producto.idproducto = galletas.idgalletas\n" +
                                                "LEFT JOIN \n" +
                                                "    pnormal ON producto.idproducto = pnormal.idpastelnormal\n" +
                                                "LEFT JOIN \n" +
                                                "    pan ON producto.idproducto = pan.idpan\n" +
                                                "LEFT JOIN \n" +
                                                "    ppersonalizado ON producto.idproducto = ppersonalizado.idppersonalizado\n" +
                                                "WHERE \n" +
                                                "    producto.fechaelaboracion BETWEEN ? AND ?;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);
            statement.setDate(1, (java.sql.Date) fecha1);
            statement.setDate(2, (java.sql.Date) fecha22);
                        

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Precio");
            modeloTabla.addColumn("Fecha de Elaboración");
            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproducto"),
                        resultSet.getString("tipo_producto"),
                        resultSet.getString("precioproducto"),
                        resultSet.getString("fechaelaboracion")
                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void last30days(){
                try{
            String consultaSQL = "SELECT \n" +
                                                "    producto.idproducto, \n" +
                                                "    producto.precioproducto, \n" +
                                                "    producto.fechaelaboracion, \n" +
                                                "    CASE \n" +
                                                "        WHEN galletas.tipo IS NOT NULL THEN 'Galleta'\n" +
                                                "        WHEN pan.tipo IS NOT NULL THEN 'Pan'\n" +
                                                "		WHEN pnormal.idpastelnormal IS NOT NULL THEN 'Pastel Normal'\n" +
                                                "        WHEN ppersonalizado.idppersonalizado IS NOT NULL THEN 'Pastel Personalizado'\n" +
                                                "        ELSE 'Tipo desconocido'\n" +
                                                "    END AS tipo_producto\n" +
                                                "FROM \n" +
                                                "    producto\n" +
                                                "LEFT JOIN \n" +
                                                "    galletas ON producto.idproducto = galletas.idgalletas\n" +
                                                "LEFT JOIN \n" +
                                                "    pnormal ON producto.idproducto = pnormal.idpastelnormal\n" +
                                                "LEFT JOIN \n" +
                                                "    pan ON producto.idproducto = pan.idpan\n" +
                                                "LEFT JOIN \n" +
                                                "    ppersonalizado ON producto.idproducto = ppersonalizado.idppersonalizado\n" +
                                                "WHERE \n" +
                                                "    producto.fechaelaboracion >= CURRENT_DATE - INTERVAL '30 days'\n" +
                                                "    AND producto.fechaelaboracion <= CURRENT_DATE;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Precio");
            modeloTabla.addColumn("Fecha de Elaboración");
            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproducto"),
                        resultSet.getString("tipo_producto"),
                        resultSet.getString("precioproducto"),
                        resultSet.getString("fechaelaboracion")
                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void orderdesc(){
          try{
            String consultaSQL = "SELECT \n" +
                                                "    producto.*,\n" +
                                                "    CASE \n" +
                                                "        WHEN galletas.tipo IS NOT NULL THEN 'Galleta'\n" +
                                                "        WHEN pan.tipo IS NOT NULL THEN 'Pan'\n" +
                                                "        WHEN pnormal.idpastelnormal IS NOT NULL THEN 'Pastel Normal'\n" +
                                                "        WHEN ppersonalizado.idppersonalizado IS NOT NULL THEN 'Pastel Personalizado'\n" +
                                                "        ELSE 'Tipo desconocido'\n" +
                                                "    END AS tipo_producto\n" +
                                                "FROM \n" +
                                                "    producto\n" +
                                                "LEFT JOIN \n" +
                                                "    galletas ON producto.idproducto = galletas.idgalletas\n" +
                                                "LEFT JOIN \n" +
                                                "    pnormal ON producto.idproducto = pnormal.idpastelnormal\n" +
                                                "LEFT JOIN \n" +
                                                "    pan ON producto.idproducto = pan.idpan\n" +
                                                "LEFT JOIN \n" +
                                                "    ppersonalizado ON producto.idproducto = ppersonalizado.idppersonalizado\n" +
                                                "ORDER BY \n" +
                                                "    producto.fechaelaboracion DESC;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Precio");
            modeloTabla.addColumn("Fecha de Elaboración");
            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproducto"),
                        resultSet.getString("tipo_producto"),
                        resultSet.getString("precioproducto"),
                        resultSet.getString("fechaelaboracion")
                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void proximosEntregar(){
        try{
            String consultaSQL = "SELECT ppersonalizado.idppersonalizado, ppersonalizado.detalles, ppersonalizado.fechaentrega - CURRENT_DATE AS TiempoRestante, ppersonalizado.fechaentrega \n" +
                                    "FROM ppersonalizado\n" +
                                    "LEFT JOIN facturaProducto ON ppersonalizado.idppersonalizado = facturaProducto.idproductof\n" +
                                    "WHERE facturaProducto.idproductof IS NULL;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Detalles");
            modeloTabla.addColumn("Dias Restantes de Entrega");
            modeloTabla.addColumn("Fecha de Entrega");

            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idppersonalizado"),
                        resultSet.getString("detalles"),
                        resultSet.getString("TiempoRestante"),
                        resultSet.getString("fechaentrega")

                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void buscarProveedor(){
        String proveedor = txtProveedor.getText();
         
        try{
            String consultaSQL = "SELECT idproveedor, nombre, contacto, detalles FROM proveedores WHERE nombre ILIKE ?" ;
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);
            statement.setString(1, "%"+proveedor+"%");

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Nombre");
            modeloTabla.addColumn("Contacto");
            modeloTabla.addColumn("Detalles");

            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproveedor"),
                        resultSet.getString("nombre"),
                        resultSet.getString("contacto"),
                        resultSet.getString("detalles")

                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }
    
    public void fechaVencimiento(){
        try{
            String consultaSQL = "SELECT \n" +
                                                "    idpan AS idproducto,\n" +
                                                "    tipo,\n" +
                                                "    fechavencimiento AS vencimiento,\n" +
                                                "    CASE \n" +
                                                "        WHEN fechavencimiento < CURRENT_DATE THEN 'Producto Vencido'\n" +
                                                "        ELSE (fechavencimiento - CURRENT_DATE) || ' Días Restantes'\n" +
                                                "    END AS estado\n" +
                                                "FROM \n" +
                                                "    pan\n" +
                                                "UNION ALL\n" +
                                                "SELECT \n" +
                                                "    idgalletas AS idproducto,\n" +
                                                "    tipo,\n" +
                                                "    fechavencimiento AS vencimiento,\n" +
                                                "    CASE \n" +
                                                "        WHEN fechavencimiento < CURRENT_DATE THEN 'Producto Vencido'\n" +
                                                "        ELSE (fechavencimiento - CURRENT_DATE) || ' Días Restantes'\n" +
                                                "    END AS estado\n" +
                                                "FROM \n" +
                                                "    galletas;";
            PreparedStatement statement = conexion.prepareStatement(consultaSQL);

            ResultSet resultSet = statement.executeQuery();
            
            DefaultTableModel modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("ID");
            modeloTabla.addColumn("Tipo");
            modeloTabla.addColumn("Fecha de Vencimiento");
            modeloTabla.addColumn("Estado");

            
            while (resultSet.next()) {
                Object[] fila = {
                        resultSet.getString("idproducto"),
                        resultSet.getString("tipo"),
                        resultSet.getString("vencimiento"),
                        resultSet.getString("estado")

                };
                modeloTabla.addRow(fila);
            }

            tablaFechas.setModel(modeloTabla);

            statement.close();
            
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar consulta: " + ex.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JComboBox<String> cbxFiltro;
    private com.toedter.calendar.JDateChooser dateFecha;
    private com.toedter.calendar.JDateChooser dateFecha2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbFecha;
    private javax.swing.JLabel lbFecha2;
    private javax.swing.JLabel lbFiltro;
    private javax.swing.JTable tablaFechas;
    private javax.swing.JTextField txtProveedor;
    // End of variables declaration//GEN-END:variables
}
